import { ethers } from "hardhat";
import fs from "fs";
import path from "path";
import archiver from "archiver";
import { execSync } from "child_process";
import fetch from "node-fetch";

async function main() {
  const [wallet] = await ethers.getSigners();

  const BASE_URI = process.env.BASE_URI || "ipfs://QmPlaceholder/{id}.json";

  const Factory = await ethers.getContractFactory("XOSealsDrop");
  const ABI = Factory.interface.fragments;

  console.log("🧪 ABI constructor args expected:", ABI.find((f: any) => f.type === "constructor"));

  const constructorFragment = ABI.find((f: any) => f.type === "constructor");
  const inputs = constructorFragment?.inputs || [];

  console.log("🧩 Expected constructor inputs from ABI:");
  inputs.forEach((input: any, index: number) => {
    console.log(`  #${index + 1}: ${input.name} (${input.type})`);
  });

  console.log("📜 Full constructor fragment:", JSON.stringify(constructorFragment, null, 2));

  if (!constructorFragment) {
    throw new Error("❌ No constructor found in ABI. Check if XOSealsDrop.json is valid and up to date.");
  }

  // Since the reverted .sol contract has no constructor arguments,
  // deploy without any arguments.
  const contract = await Factory.deploy();

  await contract.deployed();

  console.log("Contract deployed to:", contract.address);

  const outputDir = path.resolve(__dirname, "../deployments");
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
  const addressFile = `${outputDir}/XOSealsDrop.address.${timestamp}.txt`;
  const abiFile = `${outputDir}/XOSealsDrop.abi.${timestamp}.json`;

  fs.writeFileSync(addressFile, contract.address);
  fs.writeFileSync(abiFile, JSON.stringify(ABI, null, 2));

  if (process.env.PINNING_ENABLED === "true") {
    const { exec } = require("child_process");
    exec(`npx xo-fab vault.pin ${abiFile}`, (err: any, stdout: string, stderr: string) => {
      if (err) {
        console.warn("⚠️ Failed to pin ABI to IPFS/Arweave:", stderr);
      } else {
        console.log("📤 ABI pinning result:", stdout);
      }
    });
  }

  const zipFile = `${outputDir}/XOSealsDrop.${timestamp}.zip`;
  const output = fs.createWriteStream(zipFile);
  const archive = archiver("zip", { zlib: { level: 9 } });

  archive.pipe(output);
  archive.file(addressFile, { name: "XOSealsDrop.address.txt" });
  archive.file(abiFile, { name: "XOSealsDrop.abi.json" });

  await archive.finalize();
  console.log("📦 Created zip bundle at", zipFile);

  // Detect current Git branch
  let branch = "unknown-branch";
  try {
    branch = execSync("git rev-parse --abbrev-ref HEAD").toString().trim();
    console.log("🌿 Current branch:", branch);
  } catch (err) {
    console.warn("⚠️ Failed to detect Git branch:", err);
  }

  // Detect short Git commit hash
  let shortHash = "unknown-sha";
  try {
    shortHash = execSync("git rev-parse --short HEAD").toString().trim();
    console.log("🔢 Git commit:", shortHash);
  } catch (err) {
    console.warn("⚠️ Failed to detect commit hash:", err);
  }

  try {
    console.log("🚀 Publishing deployment bundle to GitHub...");
    execSync(`git add ${outputDir}`, { stdio: "inherit" });
    execSync(`git commit -m "🔧 Deploy to ${branch}: XOSealsDrop at ${contract.target} (${shortHash})"`, { stdio: "inherit" });
    execSync(`git push`, { stdio: "inherit" });

    // Create and push a tag for this deployment
    const tag = `deploy-${timestamp}-${shortHash}`;
    try {
      execSync(`git tag ${tag}`, { stdio: "inherit" });
      execSync(`git push origin ${tag}`, { stdio: "inherit" });
      console.log("🏷️ Deployment tag pushed:", tag);
    } catch (err) {
      console.warn("⚠️ Failed to create or push tag:", err);
    }

    console.log("✅ Deployment bundle pushed to GitHub.");

    const previewDir = "vault/previews";
    fs.mkdirSync(previewDir, { recursive: true });

    const previewPath = `${previewDir}/XOSealsDrop.${timestamp}.preview.mdx`;
    const previewContent = `---
title: "Deployment: XOSealsDrop"
timestamp: "${timestamp}"
contract: "${contract.target}"
branch: "${branch}"
commit: "${shortHash}"
---

New deployment of \`XOSealsDrop\` executed on branch \`${branch}\`.

- Contract address: \`${contract.target}\`
- Git commit: \`${shortHash}\`
- Tag: \`${tag}\`
`;

    fs.writeFileSync(previewPath, previewContent);
    console.log("📝 Created Pulse/Vault preview at", previewPath);

    const DISCORD_WEBHOOK = process.env.DISCORD_WEBHOOK;
    if (DISCORD_WEBHOOK) {
      const payload = {
        content: `📢 **New XOSealsDrop Deployment**
🔧 Branch: \`${branch}\`
🏷️ Tag: \`${tag}\`
📦 Contract: \`${contract.target}\`
🔗 GitHub: https://github.com/your-repo/commit/${shortHash}`
      };

      try {
        const res = await fetch(DISCORD_WEBHOOK, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload)
        });
        console.log("📣 Discord webhook sent:", await res.text());
      } catch (err) {
        console.warn("⚠️ Failed to send Discord webhook:", err);
      }
    }
  } catch (err) {
    console.error("❌ Git publish failed:", err);
  }
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
