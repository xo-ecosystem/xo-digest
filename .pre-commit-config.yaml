# === XO Pre-commit Configuration ===
repos:
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black

  - repo: https://github.com/pre-commit/mirrors-isort
    rev: v5.10.1
    hooks:
      - id: isort

  - repo: https://github.com/asottile/pyupgrade
    rev: v3.10.1
    hooks:
      - id: pyupgrade

  - repo: local
    hooks:
      - id: pytest-check
        name: Run tests
        entry: pytest
        language: python
        args: ["--tb=short", "--disable-warnings"]
        pass_filenames: false
        additional_dependencies:
          - invoke==2.2.0
          - requests>=2.31
          - asgi-lifespan==2.1.0
          - strawberry-graphql[fastapi]==0.273.2
          - httpx==0.27.0
          - pytest-asyncio>=0.23
        always_run: true
        stages: [pre-commit, pre-push, manual]

      - id: coverage-badge
        name: Generate Coverage Badge
        entry: bash
        args:
          - -c
          - >
            coverage-badge -o coverage.svg -f &&
            git add coverage.svg &&
            git diff --cached --quiet ||
            git commit -m "ci: update coverage badge" --no-verify
        language: system
        types: [python]
        always_run: true
        stages: [manual]

      - id: no-env-commits
        name: ðŸš« Prevent committing virtualenv/config noise
        entry: bash
        args:
          - -c
          - "! git diff --cached --name-only | grep -qE '(\\.venv|\\.direnv|\\.envrc)'"
        language: system
        always_run: true

      - id: cleanup-vim-swaps
        name: ðŸ”’ Remove editor artefacts
        entry: bash -c 'find . -type f \( -name "*.swp" -o -name "*~" -o -name ".COMMIT_EDITMSG.swp" \) -delete'
        language: system
        always_run: true

      - id: clean-submodules
        name: ðŸ§¹ Reset dirty submodules
        entry: bash -c 'git submodule foreach --recursive "git reset --hard && git clean -fd"'
        language: system
        always_run: true

  - repo: local
    hooks:
      - id: auto-task-summary
        name: Auto-generate task summary
        entry: bash -c 'for file in docs/task_summaries/*.md; do [ -f "$file" ] && git add "$file"; done; git status --short docs/task_summaries || true'
        language: system
        pass_filenames: false